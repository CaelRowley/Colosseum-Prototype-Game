<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init client
var type = network_socket_tcp;
var ip = "192.168.0.193";
var port = 8002;

socket = network_create_socket(type);
connection = network_connect_raw(socket, ip, port);
//network_set_config(network_config_use_non_blocking_socket, 1);

var size = 1024;
var type = buffer_fixed;
var alignment = 1;
buffer = buffer_create(size, type, alignment);

//window_set_size(1020,900);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send host info to client

//Create player
if(keyboard_check_pressed(vk_enter)){
    //instance_create(mouse_x,mouse_y,obj_player);
    
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "Player1");
    buffer_write(buffer, buffer_u32, mouse_x);
    buffer_write(buffer, buffer_u32, mouse_y);
    
    network_send_packet(socket, buffer, buffer_tell(buffer));
}

//Up
if(keyboard_check_pressed(ord("W"))){
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "W");
    network_send_packet(socket, buffer, buffer_tell(buffer));
}
if(keyboard_check_released(ord("W"))){
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "NoW");
    network_send_packet(socket, buffer, buffer_tell(buffer));
}

//Left
if(keyboard_check_pressed(ord("A"))){
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "A");
    network_send_packet(socket, buffer, buffer_tell(buffer));
}
if(keyboard_check_released(ord("A"))){
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "NoA");
    network_send_packet(socket, buffer, buffer_tell(buffer));
}

//Right
if(keyboard_check_pressed(ord("D"))){
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "D");
    network_send_packet(socket, buffer, buffer_tell(buffer));
}
if(keyboard_check_released(ord("D"))){
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "NoD");
    network_send_packet(socket, buffer, buffer_tell(buffer));
}

//Down
if(keyboard_check_pressed(ord("S"))){
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "S");
    network_send_packet(socket, buffer, buffer_tell(buffer));  
}
if(keyboard_check_released(ord("S"))){
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "NoS");
    network_send_packet(socket, buffer, buffer_tell(buffer));
}

//Attack
if(mouse_check_button_pressed(mb_left)){
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "LMB");
    network_send_packet(socket, buffer, buffer_tell(buffer));
}
if(mouse_check_button_released(mb_left)){
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "NoLMB");
    network_send_packet(socket, buffer, buffer_tell(buffer));
}

//Dash
if(keyboard_check_pressed(vk_space)){
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "space");
    network_send_packet(socket, buffer, buffer_tell(buffer));
}
if(keyboard_check_released(vk_space)){
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_string, "Nospace");
    network_send_packet(socket, buffer, buffer_tell(buffer));
}
if(keyboard_check_pressed(vk_escape)){
    socket = noone;
    show_debug_message("socket closed")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
